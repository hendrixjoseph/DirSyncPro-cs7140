/*
 * GuiObjects.java
 *
 * Copyright (C) 2008-2011 O. Givi (info@dirsyncpro.org)
 * Copyright (C) 2006 F. Gerbig
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 /*
 * Created on 2 februari 2008, 18:40
 */
package dirsyncpro.gui.settingsdialog;

import javax.swing.ImageIcon;
import javax.swing.JFrame;

import dirsyncpro.DirSyncPro;
import dirsyncpro.tools.GuiTools;

/**
 * The DirSyncPro Main GUI.
 *
 * @author F. Gerbig, O. Givi (info@dirsyncpro.org)
 */
public abstract class SettingsDialogObjects extends javax.swing.JDialog {

    public SettingsDialogObjects(JFrame frame) {
        super(frame);
        GuiTools.setSystemLookAndFeel(DirSyncPro.isSystemLookAndFeel());

        initComponents();
    }

    /**
     * Creates new form GuiObjects
     */
//    public GuiObjects() {
//       initComponents();
//    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroupLookAndFeel = new javax.swing.ButtonGroup();
        buttonGroupLogLevel = new javax.swing.ButtonGroup();
        applicationSettingtabbedPane = new javax.swing.JTabbedPane();
        javax.swing.JPanel generalSettingsPanel = new javax.swing.JPanel();
        configPathPanel = new javax.swing.JPanel();
        cofigaPathLabel2 = new javax.swing.JLabel();
        javax.swing.JPanel configPathgPanel = new javax.swing.JPanel();
        configPathLabel = new javax.swing.JLabel();
        configPathField = new javax.swing.JTextField();
        configPathBrowseButton = new javax.swing.JButton();
        jLabel38 = new javax.swing.JLabel();
        jPanel75 = new javax.swing.JPanel();
        configPathInlineCheckBox = new javax.swing.JCheckBox();
        configPathInlineCheckBoxLabel = new javax.swing.JLabel();
        spacerPanelSettingsDialog = new javax.swing.JPanel();
        updatePanel = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        label1 = new javax.swing.JLabel();
        jPanel35 = new javax.swing.JPanel();
        programUpdateCheckBox = new javax.swing.JCheckBox();
        programeUpdateCheckBoxLabel = new javax.swing.JLabel();
        checkForUpdateButton1 = new javax.swing.JButton();
        loadLastConfigPanel = new javax.swing.JPanel();
        jPanel82 = new javax.swing.JPanel();
        loadLastConfigCheckBox = new javax.swing.JCheckBox();
        jLabel64 = new javax.swing.JLabel();
        jPanel84 = new javax.swing.JPanel();
        startScheduleEngineCheckBox = new javax.swing.JCheckBox();
        jLabel67 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        javax.swing.JPanel viewPanel = new javax.swing.JPanel();
        lookNfeelPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        lookNfeelLabel = new javax.swing.JLabel();
        jPanel26 = new javax.swing.JPanel();
        nativeWindowRadioButton = new javax.swing.JRadioButton();
        jLabel16 = new javax.swing.JLabel();
        jPanel29 = new javax.swing.JPanel();
        javaMetalRadioButton = new javax.swing.JRadioButton();
        jLabel17 = new javax.swing.JLabel();
        fileCopyPanel1 = new javax.swing.JPanel();
        jPanel79 = new javax.swing.JPanel();
        minimizeToSystemTrayCheckBox = new javax.swing.JCheckBox();
        jLabel45 = new javax.swing.JLabel();
        jPanel20 = new javax.swing.JPanel();
        jPanel80 = new javax.swing.JPanel();
        singleClickSystemTrayCheckBox = new javax.swing.JCheckBox();
        jLabel47 = new javax.swing.JLabel();
        jPanel19 = new javax.swing.JPanel();
        javax.swing.JPanel syncSettingsPanel = new javax.swing.JPanel();
        spacerPanelSettingsDialog1 = new javax.swing.JPanel();
        afterSyncPanel = new javax.swing.JPanel();
        jLabel65 = new javax.swing.JLabel();
        label3 = new javax.swing.JLabel();
        jPanel83 = new javax.swing.JPanel();
        leaveSyncQueueCheckBox = new javax.swing.JCheckBox();
        jLabel66 = new javax.swing.JLabel();
        shutdownPanel = new javax.swing.JPanel();
        javax.swing.JPanel configPathgPanel1 = new javax.swing.JPanel();
        configPathLabel1 = new javax.swing.JLabel();
        shutDownCommandField = new javax.swing.JTextField();
        defaultShutDownCommand = new javax.swing.JButton();
        logSettingsPanel = new javax.swing.JPanel();
        logLevelPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        lookNfeelLabel1 = new javax.swing.JLabel();
        jPanel32 = new javax.swing.JPanel();
        minimalLogRadioButton = new javax.swing.JRadioButton();
        jLabel18 = new javax.swing.JLabel();
        jPanel33 = new javax.swing.JPanel();
        moderateLogRadioButton = new javax.swing.JRadioButton();
        jLabel19 = new javax.swing.JLabel();
        jPanel34 = new javax.swing.JPanel();
        excessiveLogRadioButton = new javax.swing.JRadioButton();
        jLabel20 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        logPathPanel = new javax.swing.JPanel();
        jPanel68 = new javax.swing.JPanel();
        logsPathInlineCheckBox = new javax.swing.JCheckBox();
        logsPathInlineCheckBoxLabel = new javax.swing.JLabel();
        javax.swing.JPanel settingsPathPanel = new javax.swing.JPanel();
        logsPathLabel = new javax.swing.JLabel();
        logsPathField = new javax.swing.JTextField();
        logsPathBrowseButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        cofigaPathLabel3 = new javax.swing.JLabel();
        globalLogPanel = new javax.swing.JPanel();
        jPanel74 = new javax.swing.JPanel();
        enableGlobalLogCheckBox = new javax.swing.JCheckBox();
        logsPathInlineCheckBoxLabel1 = new javax.swing.JLabel();
        jPanel90 = new javax.swing.JPanel();
        enableJobsetLogCheckBox = new javax.swing.JCheckBox();
        logsPathInlineCheckBoxLabel2 = new javax.swing.JLabel();
        settingsButtonsPanel1 = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setTitle("DirSync Pro options");
        setIconImage(new ImageIcon(getClass().getResource("/icons/DirSyncPro64x64.png")).getImage());
        setModal(true);
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        applicationSettingtabbedPane.setMaximumSize(null);

        generalSettingsPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        generalSettingsPanel.setLayout(new java.awt.GridBagLayout());

        configPathPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Jobset path"));
        configPathPanel.setLayout(new java.awt.GridBagLayout());

        cofigaPathLabel2.setText("Please select the path where your jobset files are usually saved:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        configPathPanel.add(cofigaPathLabel2, gridBagConstraints);

        configPathgPanel.setLayout(new java.awt.GridBagLayout());

        configPathLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/dirBlue.png"))); // NOI18N
        configPathLabel.setText("Jobset files path:");
        configPathgPanel.add(configPathLabel, new java.awt.GridBagConstraints());

        configPathField.setEditable(false);
        configPathField.setMaximumSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        configPathgPanel.add(configPathField, gridBagConstraints);

        configPathBrowseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/browse.png"))); // NOI18N
        configPathBrowseButton.setToolTipText("Browse for the jobset file path");
        configPathBrowseButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        configPathBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configPathBrowseButtonActionPerformed(evt);
            }
        });
        configPathgPanel.add(configPathBrowseButton, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        configPathPanel.add(configPathgPanel, gridBagConstraints);

        jLabel38.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icon_config.png"))); // NOI18N
        jLabel38.setMaximumSize(null);
        jLabel38.setMinimumSize(null);
        jLabel38.setPreferredSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        configPathPanel.add(jLabel38, gridBagConstraints);

        jPanel75.setMaximumSize(null);
        jPanel75.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        configPathInlineCheckBox.setMaximumSize(null);
        configPathInlineCheckBox.setMinimumSize(null);
        configPathInlineCheckBox.setPreferredSize(null);
        configPathInlineCheckBox.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configPathInlineCheckBoxActionPerformed(evt);
            }
        });
        jPanel75.add(configPathInlineCheckBox);

        configPathInlineCheckBoxLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/DirSyncPro.png"))); // NOI18N
        configPathInlineCheckBoxLabel.setText("Save the jobset files in the program folder (if writable).");
        jPanel75.add(configPathInlineCheckBoxLabel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        configPathPanel.add(jPanel75, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        generalSettingsPanel.add(configPathPanel, gridBagConstraints);

        spacerPanelSettingsDialog.setMaximumSize(null);
        spacerPanelSettingsDialog.setMinimumSize(null);
        spacerPanelSettingsDialog.setPreferredSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weighty = 1.0;
        generalSettingsPanel.add(spacerPanelSettingsDialog, gridBagConstraints);

        updatePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Updates"));
        updatePanel.setLayout(new java.awt.GridBagLayout());

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/update16x16.png"))); // NOI18N
        jLabel9.setMaximumSize(null);
        jLabel9.setMinimumSize(null);
        jLabel9.setPreferredSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        updatePanel.add(jLabel9, gridBagConstraints);

        label1.setText("Should DirSync Pro check for program updates at start up?");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        updatePanel.add(label1, gridBagConstraints);

        jPanel35.setMaximumSize(null);
        jPanel35.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        programUpdateCheckBox.setMaximumSize(null);
        programUpdateCheckBox.setMinimumSize(null);
        programUpdateCheckBox.setPreferredSize(null);
        jPanel35.add(programUpdateCheckBox);

        programeUpdateCheckBoxLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/update16x16.png"))); // NOI18N
        programeUpdateCheckBoxLabel.setText("Check for program updates at start up.");
        programeUpdateCheckBoxLabel.setToolTipText("<html>When connected to internet, check automatically for new program updates. This happens in the background evry time the program starts. <br />If new program updates are found, a dialog is shown which lets you visit the download site and download the new version.</html>");
        jPanel35.add(programeUpdateCheckBoxLabel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        updatePanel.add(jPanel35, gridBagConstraints);

        checkForUpdateButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/update16x16.png"))); // NOI18N
        checkForUpdateButton1.setText("Check now");
        checkForUpdateButton1.setToolTipText("Check for program updates now.");
        checkForUpdateButton1.setAlignmentX(0.5F);
        checkForUpdateButton1.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkForUpdateButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        updatePanel.add(checkForUpdateButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        generalSettingsPanel.add(updatePanel, gridBagConstraints);

        loadLastConfigPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("On startup"));
        loadLastConfigPanel.setLayout(new java.awt.GridBagLayout());

        jPanel82.setMaximumSize(null);
        jPanel82.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        loadLastConfigCheckBox.setMaximumSize(null);
        loadLastConfigCheckBox.setMinimumSize(null);
        loadLastConfigCheckBox.setPreferredSize(null);
        jPanel82.add(loadLastConfigCheckBox);

        jLabel64.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/browse.png"))); // NOI18N
        jLabel64.setText("Load last loaded jobset upon start up.");
        jPanel82.add(jLabel64);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        loadLastConfigPanel.add(jPanel82, gridBagConstraints);

        jPanel84.setMaximumSize(null);
        jPanel84.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        startScheduleEngineCheckBox.setMaximumSize(null);
        startScheduleEngineCheckBox.setMinimumSize(null);
        startScheduleEngineCheckBox.setPreferredSize(null);
        jPanel84.add(startScheduleEngineCheckBox);

        jLabel67.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/startSchedule.png"))); // NOI18N
        jLabel67.setText("Start the Schedule Engine upon start up.");
        jPanel84.add(jLabel67);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        loadLastConfigPanel.add(jPanel84, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        loadLastConfigPanel.add(jPanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        generalSettingsPanel.add(loadLastConfigPanel, gridBagConstraints);

        applicationSettingtabbedPane.addTab("General", generalSettingsPanel);

        viewPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        viewPanel.setLayout(new java.awt.GridBagLayout());

        lookNfeelPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Look & feel"));
        lookNfeelPanel.setLayout(new java.awt.GridBagLayout());

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/colors.png"))); // NOI18N
        jLabel7.setMaximumSize(null);
        jLabel7.setMinimumSize(null);
        jLabel7.setPreferredSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        lookNfeelPanel.add(jLabel7, gridBagConstraints);

        lookNfeelLabel.setText("Please select the look & feel for the application:");
        lookNfeelLabel.setMaximumSize(null);
        lookNfeelLabel.setMinimumSize(null);
        lookNfeelLabel.setPreferredSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        lookNfeelPanel.add(lookNfeelLabel, gridBagConstraints);

        jPanel26.setMaximumSize(null);
        jPanel26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        buttonGroupLookAndFeel.add(nativeWindowRadioButton);
        nativeWindowRadioButton.setMaximumSize(null);
        nativeWindowRadioButton.setMinimumSize(null);
        nativeWindowRadioButton.setPreferredSize(null);
        jPanel26.add(nativeWindowRadioButton);

        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/colors.png"))); // NOI18N
        jLabel16.setText("System \"Native Windows\" look & feel");
        jLabel16.setMaximumSize(null);
        jLabel16.setMinimumSize(null);
        jLabel16.setPreferredSize(null);
        jPanel26.add(jLabel16);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        lookNfeelPanel.add(jPanel26, gridBagConstraints);

        jPanel29.setMaximumSize(null);
        jPanel29.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        buttonGroupLookAndFeel.add(javaMetalRadioButton);
        javaMetalRadioButton.setMaximumSize(null);
        javaMetalRadioButton.setMinimumSize(null);
        javaMetalRadioButton.setPreferredSize(null);
        jPanel29.add(javaMetalRadioButton);

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/lookandfeel.png"))); // NOI18N
        jLabel17.setText("Java \"Metal\" look & feel");
        jLabel17.setMaximumSize(null);
        jLabel17.setMinimumSize(null);
        jLabel17.setPreferredSize(null);
        jPanel29.add(jLabel17);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        lookNfeelPanel.add(jPanel29, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        viewPanel.add(lookNfeelPanel, gridBagConstraints);

        fileCopyPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("System tray"));
        fileCopyPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel79.setMaximumSize(null);
        jPanel79.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        minimizeToSystemTrayCheckBox.setMaximumSize(null);
        minimizeToSystemTrayCheckBox.setMinimumSize(null);
        minimizeToSystemTrayCheckBox.setPreferredSize(null);
        jPanel79.add(minimizeToSystemTrayCheckBox);

        jLabel45.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/DirSyncPro16x16.png"))); // NOI18N
        jLabel45.setText("Minimize to the system tray when minimizing the main window.");
        jPanel79.add(jLabel45);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        fileCopyPanel1.add(jPanel79, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        fileCopyPanel1.add(jPanel20, gridBagConstraints);

        jPanel80.setMaximumSize(null);
        jPanel80.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        singleClickSystemTrayCheckBox.setMaximumSize(null);
        singleClickSystemTrayCheckBox.setMinimumSize(null);
        singleClickSystemTrayCheckBox.setPreferredSize(null);
        singleClickSystemTrayCheckBox.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleClickSystemTrayCheckBoxActionPerformed(evt);
            }
        });
        jPanel80.add(singleClickSystemTrayCheckBox);

        jLabel47.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/mouse.png"))); // NOI18N
        jLabel47.setText("Use single click instead of double click to restore the main window.");
        jPanel80.add(jLabel47);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        fileCopyPanel1.add(jPanel80, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        viewPanel.add(fileCopyPanel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weighty = 1.0;
        viewPanel.add(jPanel19, gridBagConstraints);

        applicationSettingtabbedPane.addTab("View", viewPanel);

        syncSettingsPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        syncSettingsPanel.setLayout(new java.awt.GridBagLayout());

        spacerPanelSettingsDialog1.setMaximumSize(null);
        spacerPanelSettingsDialog1.setMinimumSize(null);
        spacerPanelSettingsDialog1.setPreferredSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weighty = 1.0;
        syncSettingsPanel.add(spacerPanelSettingsDialog1, gridBagConstraints);

        afterSyncPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("After Sync"));
        afterSyncPanel.setLayout(new java.awt.GridBagLayout());

        jLabel65.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/syncModeBI16x16.png"))); // NOI18N
        jLabel65.setMaximumSize(null);
        jLabel65.setMinimumSize(null);
        jLabel65.setPreferredSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        afterSyncPanel.add(jLabel65, gridBagConstraints);

        label3.setText("Should DirSync Pro keep the sync queue when synchronization is finished?");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        afterSyncPanel.add(label3, gridBagConstraints);

        jPanel83.setMaximumSize(null);
        jPanel83.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        leaveSyncQueueCheckBox.setMaximumSize(null);
        leaveSyncQueueCheckBox.setMinimumSize(null);
        leaveSyncQueueCheckBox.setPreferredSize(null);
        jPanel83.add(leaveSyncQueueCheckBox);

        jLabel66.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/syncModeBI16x16.png"))); // NOI18N
        jLabel66.setText("Keep the sync queue after synchronization.");
        jPanel83.add(jLabel66);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        afterSyncPanel.add(jPanel83, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        syncSettingsPanel.add(afterSyncPanel, gridBagConstraints);

        shutdownPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Shut down"));
        shutdownPanel.setLayout(new java.awt.GridBagLayout());

        configPathgPanel1.setLayout(new java.awt.GridBagLayout());

        configPathLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/exit16x16.png"))); // NOI18N
        configPathLabel1.setText("Shut down command:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        configPathgPanel1.add(configPathLabel1, gridBagConstraints);

        shutDownCommandField.setMaximumSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        configPathgPanel1.add(shutDownCommandField, gridBagConstraints);

        defaultShutDownCommand.setText("Default");
        defaultShutDownCommand.setToolTipText("Browse for the jobset file path");
        defaultShutDownCommand.setMargin(new java.awt.Insets(2, 2, 2, 2));
        defaultShutDownCommand.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultShutDownCommandActionPerformed(evt);
            }
        });
        configPathgPanel1.add(defaultShutDownCommand, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        shutdownPanel.add(configPathgPanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        syncSettingsPanel.add(shutdownPanel, gridBagConstraints);

        applicationSettingtabbedPane.addTab("Sync", syncSettingsPanel);

        logSettingsPanel.setLayout(new java.awt.GridBagLayout());

        logLevelPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Log level"));
        logLevelPanel.setLayout(new java.awt.GridBagLayout());

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/log.png"))); // NOI18N
        jLabel8.setMaximumSize(null);
        jLabel8.setMinimumSize(null);
        jLabel8.setPreferredSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        logLevelPanel.add(jLabel8, gridBagConstraints);

        lookNfeelLabel1.setText("How excessive should the log/output be?");
        lookNfeelLabel1.setMaximumSize(null);
        lookNfeelLabel1.setMinimumSize(null);
        lookNfeelLabel1.setPreferredSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        logLevelPanel.add(lookNfeelLabel1, gridBagConstraints);

        jPanel32.setMaximumSize(null);
        jPanel32.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        buttonGroupLogLevel.add(minimalLogRadioButton);
        minimalLogRadioButton.setMaximumSize(null);
        minimalLogRadioButton.setMinimumSize(null);
        minimalLogRadioButton.setPreferredSize(null);
        jPanel32.add(minimalLogRadioButton);

        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/config3.png"))); // NOI18N
        jLabel18.setText("Minimal: events, warnings and errors");
        jPanel32.add(jLabel18);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        logLevelPanel.add(jPanel32, gridBagConstraints);

        jPanel33.setMaximumSize(null);
        jPanel33.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        buttonGroupLogLevel.add(moderateLogRadioButton);
        moderateLogRadioButton.setMaximumSize(null);
        moderateLogRadioButton.setMinimumSize(null);
        moderateLogRadioButton.setPreferredSize(null);
        jPanel33.add(moderateLogRadioButton);

        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/config2.png"))); // NOI18N
        jLabel19.setText("Moderate: events, warnings, errors and filenames");
        jPanel33.add(jLabel19);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        logLevelPanel.add(jPanel33, gridBagConstraints);

        jPanel34.setMaximumSize(null);
        jPanel34.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        buttonGroupLogLevel.add(excessiveLogRadioButton);
        excessiveLogRadioButton.setMaximumSize(null);
        excessiveLogRadioButton.setMinimumSize(null);
        excessiveLogRadioButton.setPreferredSize(null);
        jPanel34.add(excessiveLogRadioButton);

        jLabel20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/config4.png"))); // NOI18N
        jLabel20.setText("Excessive: events, warnings, errors, filenames, configuration and debug data");
        jPanel34.add(jLabel20);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        logLevelPanel.add(jPanel34, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        logSettingsPanel.add(logLevelPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weighty = 1.0;
        logSettingsPanel.add(jPanel4, gridBagConstraints);

        logPathPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Log path"));
        logPathPanel.setLayout(new java.awt.GridBagLayout());

        jPanel68.setMaximumSize(null);
        jPanel68.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        logsPathInlineCheckBox.setMaximumSize(null);
        logsPathInlineCheckBox.setMinimumSize(null);
        logsPathInlineCheckBox.setPreferredSize(null);
        logsPathInlineCheckBox.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logsPathInlineCheckBoxActionPerformed(evt);
            }
        });
        jPanel68.add(logsPathInlineCheckBox);

        logsPathInlineCheckBoxLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/DirSyncPro16x16.png"))); // NOI18N
        logsPathInlineCheckBoxLabel.setText("Save the log files in the program folder (if writable).");
        jPanel68.add(logsPathInlineCheckBoxLabel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        logPathPanel.add(jPanel68, gridBagConstraints);

        settingsPathPanel.setLayout(new java.awt.GridBagLayout());

        logsPathLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/dirBlue.png"))); // NOI18N
        logsPathLabel.setText("Log files path:");
        settingsPathPanel.add(logsPathLabel, new java.awt.GridBagConstraints());

        logsPathField.setEditable(false);
        logsPathField.setMaximumSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        settingsPathPanel.add(logsPathField, gridBagConstraints);

        logsPathBrowseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/browse.png"))); // NOI18N
        logsPathBrowseButton.setToolTipText("Browse for the log file path");
        logsPathBrowseButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        logsPathBrowseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logsPathBrowseButtonMouseClicked(evt);
            }
        });
        logsPathBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logsPathBrowseButtonActionPerformed(evt);
            }
        });
        settingsPathPanel.add(logsPathBrowseButton, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        logPathPanel.add(settingsPathPanel, gridBagConstraints);

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icon_config.png"))); // NOI18N
        jLabel6.setMaximumSize(null);
        jLabel6.setMinimumSize(null);
        jLabel6.setPreferredSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        logPathPanel.add(jLabel6, gridBagConstraints);

        cofigaPathLabel3.setText("Please select the path where the log files should be saved (both global and individual):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        logPathPanel.add(cofigaPathLabel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        logSettingsPanel.add(logPathPanel, gridBagConstraints);

        globalLogPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Global and Jobset"));
        globalLogPanel.setLayout(new java.awt.GridBagLayout());

        jPanel74.setMaximumSize(null);
        jPanel74.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        enableGlobalLogCheckBox.setMaximumSize(null);
        enableGlobalLogCheckBox.setMinimumSize(null);
        enableGlobalLogCheckBox.setPreferredSize(null);
        enableGlobalLogCheckBox.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableGlobalLogCheckBoxActionPerformed(evt);
            }
        });
        jPanel74.add(enableGlobalLogCheckBox);

        logsPathInlineCheckBoxLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/log.png"))); // NOI18N
        logsPathInlineCheckBoxLabel1.setText("Enable global log (DirSyncPro.log, contains all the individual logs for all jobsets).");
        jPanel74.add(logsPathInlineCheckBoxLabel1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        globalLogPanel.add(jPanel74, gridBagConstraints);

        jPanel90.setMaximumSize(null);
        jPanel90.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        enableJobsetLogCheckBox.setMaximumSize(null);
        enableJobsetLogCheckBox.setMinimumSize(null);
        enableJobsetLogCheckBox.setPreferredSize(null);
        enableJobsetLogCheckBox.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableJobsetLogCheckBoxActionPerformed(evt);
            }
        });
        jPanel90.add(enableJobsetLogCheckBox);

        logsPathInlineCheckBoxLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/log.png"))); // NOI18N
        logsPathInlineCheckBoxLabel2.setText("Enable jobset log ([JOBSET].log, contains all the individual logs per jobset).");
        jPanel90.add(logsPathInlineCheckBoxLabel2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        globalLogPanel.add(jPanel90, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        logSettingsPanel.add(globalLogPanel, gridBagConstraints);

        applicationSettingtabbedPane.addTab("Log", logSettingsPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(applicationSettingtabbedPane, gridBagConstraints);

        settingsButtonsPanel1.setLayout(new javax.swing.BoxLayout(settingsButtonsPanel1, javax.swing.BoxLayout.LINE_AXIS));

        okButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/ok.png"))); // NOI18N
        okButton.setText("OK");
        okButton.setAlignmentX(0.5F);
        okButton.setMaximumSize(null);
        okButton.setMinimumSize(null);
        okButton.setPreferredSize(null);
        okButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        settingsButtonsPanel1.add(okButton);

        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/cancel.png"))); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.setAlignmentX(0.5F);
        cancelButton.setMaximumSize(null);
        cancelButton.setMinimumSize(null);
        cancelButton.setPreferredSize(null);
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtoncancelActionPerformed(evt);
            }
        });
        settingsButtonsPanel1.add(cancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        getContentPane().add(settingsButtonsPanel1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void configPathBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configPathBrowseButtonActionPerformed
    browseConfigPath();
}//GEN-LAST:event_configPathBrowseButtonActionPerformed

private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
    applyApplicationSettings();
    this.setVisible(false);
}//GEN-LAST:event_okButtonActionPerformed

private void cancelButtoncancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtoncancelActionPerformed
    this.setVisible(false);
}//GEN-LAST:event_cancelButtoncancelActionPerformed

private void checkForUpdateButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkForUpdateButton1ActionPerformed
    checkForUpdate(false);
}//GEN-LAST:event_checkForUpdateButton1ActionPerformed

private void logsPathBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logsPathBrowseButtonActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_logsPathBrowseButtonActionPerformed

private void logsPathBrowseButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logsPathBrowseButtonMouseClicked
    browseSettingsLogPath();
}//GEN-LAST:event_logsPathBrowseButtonMouseClicked

private void logsPathInlineCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logsPathInlineCheckBoxActionPerformed
    logsPathCheckboxClicked();
}//GEN-LAST:event_logsPathInlineCheckBoxActionPerformed

private void configPathInlineCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configPathInlineCheckBoxActionPerformed
    configPathCheckboxClicked();
}//GEN-LAST:event_configPathInlineCheckBoxActionPerformed

private void enableGlobalLogCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableGlobalLogCheckBoxActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_enableGlobalLogCheckBoxActionPerformed

private void singleClickSystemTrayCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleClickSystemTrayCheckBoxActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_singleClickSystemTrayCheckBoxActionPerformed

private void openRecentMenuItemopenConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openRecentMenuItemopenConfigActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_openRecentMenuItemopenConfigActionPerformed

private void enableJobsetLogCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableJobsetLogCheckBoxActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_enableJobsetLogCheckBoxActionPerformed

    private void defaultShutDownCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultShutDownCommandActionPerformed
        setDefaultShutDownCommandField();
    }//GEN-LAST:event_defaultShutDownCommandActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel afterSyncPanel;
    protected javax.swing.JTabbedPane applicationSettingtabbedPane;
    private javax.swing.ButtonGroup buttonGroupLogLevel;
    private javax.swing.ButtonGroup buttonGroupLookAndFeel;
    protected javax.swing.JButton cancelButton;
    protected javax.swing.JButton checkForUpdateButton1;
    private javax.swing.JLabel cofigaPathLabel2;
    private javax.swing.JLabel cofigaPathLabel3;
    protected javax.swing.JButton configPathBrowseButton;
    protected javax.swing.JTextField configPathField;
    protected javax.swing.JCheckBox configPathInlineCheckBox;
    protected javax.swing.JLabel configPathInlineCheckBoxLabel;
    protected javax.swing.JLabel configPathLabel;
    protected javax.swing.JLabel configPathLabel1;
    private javax.swing.JPanel configPathPanel;
    protected javax.swing.JButton defaultShutDownCommand;
    protected javax.swing.JCheckBox enableGlobalLogCheckBox;
    protected javax.swing.JCheckBox enableJobsetLogCheckBox;
    protected javax.swing.JRadioButton excessiveLogRadioButton;
    private javax.swing.JPanel fileCopyPanel1;
    private javax.swing.JPanel globalLogPanel;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel68;
    private javax.swing.JPanel jPanel74;
    private javax.swing.JPanel jPanel75;
    private javax.swing.JPanel jPanel79;
    private javax.swing.JPanel jPanel80;
    private javax.swing.JPanel jPanel82;
    private javax.swing.JPanel jPanel83;
    private javax.swing.JPanel jPanel84;
    private javax.swing.JPanel jPanel90;
    protected javax.swing.JRadioButton javaMetalRadioButton;
    private javax.swing.JLabel label1;
    private javax.swing.JLabel label3;
    protected javax.swing.JCheckBox leaveSyncQueueCheckBox;
    protected javax.swing.JCheckBox loadLastConfigCheckBox;
    private javax.swing.JPanel loadLastConfigPanel;
    private javax.swing.JPanel logLevelPanel;
    private javax.swing.JPanel logPathPanel;
    private javax.swing.JPanel logSettingsPanel;
    protected javax.swing.JButton logsPathBrowseButton;
    protected javax.swing.JTextField logsPathField;
    protected javax.swing.JCheckBox logsPathInlineCheckBox;
    protected javax.swing.JLabel logsPathInlineCheckBoxLabel;
    protected javax.swing.JLabel logsPathInlineCheckBoxLabel1;
    protected javax.swing.JLabel logsPathInlineCheckBoxLabel2;
    protected javax.swing.JLabel logsPathLabel;
    private javax.swing.JLabel lookNfeelLabel;
    private javax.swing.JLabel lookNfeelLabel1;
    private javax.swing.JPanel lookNfeelPanel;
    protected javax.swing.JRadioButton minimalLogRadioButton;
    protected javax.swing.JCheckBox minimizeToSystemTrayCheckBox;
    protected javax.swing.JRadioButton moderateLogRadioButton;
    protected javax.swing.JRadioButton nativeWindowRadioButton;
    protected javax.swing.JButton okButton;
    protected javax.swing.JCheckBox programUpdateCheckBox;
    protected javax.swing.JLabel programeUpdateCheckBoxLabel;
    private javax.swing.JPanel settingsButtonsPanel1;
    protected javax.swing.JTextField shutDownCommandField;
    private javax.swing.JPanel shutdownPanel;
    protected javax.swing.JCheckBox singleClickSystemTrayCheckBox;
    private javax.swing.JPanel spacerPanelSettingsDialog;
    private javax.swing.JPanel spacerPanelSettingsDialog1;
    protected javax.swing.JCheckBox startScheduleEngineCheckBox;
    private javax.swing.JPanel updatePanel;
    // End of variables declaration//GEN-END:variables

    abstract protected void applyApplicationSettings();

    abstract protected void browseConfigPath();

    abstract protected void iconifyForm();

    abstract protected void exitForm();

    abstract protected void browseSettingsLogPath();

    abstract protected void checkForUpdate(boolean b);

    abstract protected void configPathCheckboxClicked();

    abstract protected void logsPathCheckboxClicked();

    abstract protected void setDefaultShutDownCommandField();
}
